package com.gatetech.controller.fragments;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.net.Uri;import android.os.Bundle;import android.support.design.widget.TextInputEditText;import android.support.v4.app.Fragment;import android.text.TextUtils;import android.text.method.KeyListener;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import com.gatetech.asyncServer.DataClientRestService;import com.gatetech.asyncServer.RestService;import com.gatetech.cadewiclients.R;import com.gatetech.content.AddressContent;import com.gatetech.content.ClientContent;import com.gatetech.restserver.Response.ClientesResponse;import com.gatetech.utils.Utils;import com.gatetech.restserver.Response.DirectoriosPostales;import com.gatetech.utils.logger;import com.gatetech.utils.popUp;import java.util.ArrayList;import java.util.List;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;import static com.gatetech.utils.Utils.get_manufacturer;/** * A simple {@link Fragment} subclass. * Activities that contain this fragment must implement the * {@link AddNewClientFragment.OnFragmentInteractionListener} interface * to handle interaction events. * Use the {@link AddNewClientFragment#newInstance} factory method to * create an instance of this fragment. */public class AddNewClientFragment extends Fragment implements DataClientRestService.OnRestServiceClientListener {    // TODO: Rename parameter arguments, choose names that match    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER    public static final int MODE_VISOR = 1;    public static final int MODE_REGISTER = 2;    public static final int MODE_UPDATE = 3;    public static final int JUMP_LOGIN = 1;    public static final int JUMP_CLIENTLIST = 2;    private static final String ARG_OPERATIONMODE = "OperationMode";    private static final String ARG_JUMPACTION = "JumpTo";    private static final Integer POSITION = 0;    // TODO: Rename and change types of parameters    private int mOperationMode;    private int mJumpAction;    public ClientContent.ClientItem mclientItem;    private View view;    private static TextInputEditText txtName;    private static TextInputEditText txtRfc;    private static TextInputEditText txtPhone;    private static TextInputEditText txtEmail;    private static TextInputEditText txtStreet;    private static TextInputEditText txtZipCode;    private static TextInputEditText txtNeighborhood;    private static Spinner cmbNeighborhood;    private static TextView txtDelegation;    private static TextView txtState;    private static  TextView txtCity;    private static Button btnActionMode;    private static Button btnGetAddressZip;    public DirectoriosPostales zipAdrees;    private OnFragmentInteractionListener mListener;    public AddNewClientFragment() {        // Required empty public constructor    }    static OnNewClientListener listener;    static public void setListener(OnNewClientListener listener) {        AddNewClientFragment.listener=listener;    }    /**     * Use this factory method to create a new instance of     * this fragment using the provided parameters.     *     * @param operation_mode Parameter 1.     * @return A new instance of fragment ClientFragment.     */    // TODO: Rename and change types and number of parameters    static public AddNewClientFragment newInstance(int operation_mode,int jump_to, ClientContent.ClientItem client) {        AddNewClientFragment fragment = new AddNewClientFragment();        Bundle args = new Bundle();        args.putInt(ARG_OPERATIONMODE, operation_mode);        args.putInt(ARG_JUMPACTION, jump_to);        fragment.mclientItem = client;        fragment.setArguments(args);        return fragment;    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (getArguments() != null) {            mOperationMode = getArguments().getInt(ARG_OPERATIONMODE);            mJumpAction = getArguments().getInt(ARG_JUMPACTION);        }        DataClientRestService.setClientListener(this);        // popUp.setListener(this);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        this.view= inflater.inflate(R.layout.fragment_gatetech_add_client, container, false);        setUIComponents(this.view);        //SADB        ConfigView();        return view;    }    // TODO: Rename method, update argument and hook method into UI event    public void onButtonPressed(Uri uri) {        if (mListener != null) {            mListener.onFragmentInteraction(uri);        }    }    @Override    public void onAttach(Context context) {        super.onAttach(context);        if (context instanceof OnFragmentInteractionListener) {            mListener = (OnFragmentInteractionListener) context;        } else {            throw new RuntimeException(context.toString()                    + " must implement OnFragmentInteractionListener");        }    }    @Override    public void onDetach() {        super.onDetach();        mListener = null;        popUp.CloseWaitMessageBox();    }    /**     * This interface must be implemented by activities that contain this     * fragment to allow an interaction in this fragment to be communicated     * to the activity and potentially other fragments contained in that     * activity.     * <p>     * See the Android Training lesson <a href=     * "http://developer.android.com/training/basics/fragments/communicating.html"     * >Communicating with Other Fragments</a> for more information.     */    public interface OnFragmentInteractionListener {        // TODO: Update argument type and name        void onFragmentInteraction(Uri uri);    }    /**************************SADB: Methods Solutions ******************************/    private void checkZipCode() {        // SADB: Clean spinner       cmbNeighborhood.setAdapter(null);       Toast.makeText(getContext(),"Rastreando el C.P "+txtZipCode.getText().toString(),Toast.LENGTH_SHORT).show();        // SADB: Call to REST API        final Call<DirectoriosPostales> callZipCode = Utils.mApiService.getAddress(txtZipCode.getText().toString());        callZipCode.enqueue( new Callback<DirectoriosPostales>() {            @Override            public void onResponse(Call<DirectoriosPostales> call, Response<DirectoriosPostales> response) {                final StringBuilder message  = new StringBuilder();                //Toast.makeText(getContext(),"Busqueda de ZipCode: " ,Toast.LENGTH_LONG).show();                if (response.isSuccessful()) {                    zipAdrees = new DirectoriosPostales();                    zipAdrees = response.body();                    Toast.makeText(getContext(),zipAdrees.getExcepcion(),Toast.LENGTH_SHORT).show();                    if(zipAdrees.getEstado().equals(Utils.Status_OK)) {                        // Elementos en Spinner                        List<String> values = new ArrayList<String>();                        if (!(zipAdrees.getDirectorioPostal() == null) ) {                            for (DirectoriosPostales.DirectorioPostal dp: zipAdrees.getDirectorioPostal())                            {                                values.add( dp.getDAsenta() );                            }                            ArrayAdapter<String> dataAdapter = new ArrayAdapter<String> (getActivity(),android.R.layout.simple_spinner_item,values);                            dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);                            cmbNeighborhood.setAdapter(dataAdapter);                            cmbNeighborhood.setOnItemSelectedListener(new selectedZipcode());                        }                    }                    else if (zipAdrees.getEstado().equals(Utils.Status_FAIL)) {                        popUp.AlertDialog(zipAdrees.getExcepcion(),"Mensaje","Aceptar",getActivity());                    }                }                else  {                    message.append("Error HTTP: ").append(response.code()).append(" ").append( response.message());                    popUp.AlertDialog(message.toString(),"Error","Aceptar",getActivity());                    //  popUp.AlertDialog(response.message(),"Error","Aceptar",getActivity());                }            }            @Override            public void onFailure(Call<DirectoriosPostales> call, Throwable t) {                popUp.AlertDialog("Error: "+ t.getMessage(),"Error !!!","Cerrar",getActivity());               // Toast.makeText(getContext(),"ZipCode Error : " + t.getMessage(),Toast.LENGTH_LONG).show();            }        } );    }    private void setUIComponents(View rootView) {        txtName = (TextInputEditText) rootView.findViewById(R.id.txtName);        txtRfc = (TextInputEditText) rootView.findViewById(R.id.txtRfc);        txtPhone = (TextInputEditText) rootView.findViewById(R.id.txtPhone);        txtEmail = (TextInputEditText) rootView.findViewById(R.id.txtEmail);        txtStreet = (TextInputEditText) rootView.findViewById(R.id.txtSttret);        txtZipCode = (TextInputEditText) rootView.findViewById(R.id.txtZipCode);        txtNeighborhood = (TextInputEditText) rootView.findViewById(R.id.txtNeighborhood);        cmbNeighborhood = (Spinner) rootView.findViewById(R.id.cmbNeighborhood);        txtDelegation = (TextView) rootView.findViewById(R.id.txtDelegation);        txtState = (TextView) rootView.findViewById(R.id.txtState);        txtCity = (TextView) rootView.findViewById(R.id.txtCity);        btnGetAddressZip =(Button) rootView.findViewById(R.id.btnZipcode);        btnActionMode =(Button) rootView.findViewById(R.id.btnSave);    }    private void ConfigView() {        btnActionMode.setOnClickListener(new View.OnClickListener() {                                        @Override                                        public void onClick(View view) {                                            if (!validateinfo()) {                                                StartActionClient();                                            }                                        }                                    }        );        btnGetAddressZip.setOnClickListener(new View.OnClickListener() {                                           @Override                                           public void onClick(View view) {                                               checkZipCode();                                           }                                       }        );        if (mOperationMode == MODE_VISOR && this.mclientItem != null) {            getActivity().setTitle(R.string.prompt_ClientDetail_Title);            ModeltoView();            // Freeze Controls            txtName.setKeyListener((KeyListener ) txtName.getTag());            txtRfc.setKeyListener((KeyListener) txtRfc.getTag());            txtPhone.setKeyListener((KeyListener) txtPhone.getTag());            txtEmail.setKeyListener((KeyListener) txtEmail.getTag());            txtStreet.setKeyListener((KeyListener ) txtStreet.getTag());            txtZipCode.setKeyListener((KeyListener) txtZipCode.getTag());            txtNeighborhood.setKeyListener((KeyListener) txtNeighborhood.getTag());            txtDelegation.setKeyListener((KeyListener) txtDelegation.getTag());            txtState.setKeyListener((KeyListener) txtState.getTag());            txtCity.setKeyListener((KeyListener) txtCity.getTag());            btnActionMode.setVisibility( View.INVISIBLE );            btnGetAddressZip.setVisibility( View.INVISIBLE );        }        if (mOperationMode == MODE_UPDATE && this.mclientItem != null) {            getActivity().setTitle(R.string.prompt_ClientDetail_Title);            ModeltoView();            btnActionMode.setVisibility( View.VISIBLE );            btnGetAddressZip.setVisibility( View.VISIBLE );            btnActionMode.setText("Actualizar");        }        else if(mOperationMode == MODE_REGISTER ){            getActivity().setTitle(R.string.prompt_NewClient_Title);        }    }    private void ModeltoView() {        txtName.setText( mclientItem.name );        txtRfc.setText( mclientItem.rfc );        txtPhone.setText(mclientItem.Contacts.getItem( "telefono" ).value );        txtEmail.setText(mclientItem.Contacts.getItem( "Correo" ).value);        AddressContent.AddressItem address = mclientItem.Address.ITEMS.size()>0? mclientItem.Address.ITEMS.get(POSITION): new AddressContent.AddressItem();        txtStreet.setText(address.street);        txtZipCode.setText(address.zipCode);        txtNeighborhood.setText(address.Neighborhood);        txtDelegation.setText(address.Delegation);        txtState.setText(address.State);        txtCity.setText(address.City);    }    private void ViewtoModel () {        mclientItem.name = txtName.getText().toString();        mclientItem.rfc =  txtRfc.getText().toString();        mclientItem.Contacts.updateItem("telefono",txtPhone.getText().toString());        mclientItem.Contacts.updateItem("Correo",txtEmail.getText().toString());        AddressContent.AddressItem address = mclientItem.Address.ITEMS.size()>0? mclientItem.Address.ITEMS.get(POSITION): new AddressContent.AddressItem();        address.street = txtStreet.getText().toString();        address.zipCode = txtZipCode.getText().toString();        address.Neighborhood = txtNeighborhood.getText().toString();        address.Delegation = txtDelegation.getText().toString();        address.State = txtState.getText().toString();        address.City = txtCity.getText().toString();    }    private void StartActionClient() {        AlertDialog.Builder dialog = new AlertDialog.Builder(getActivity());        dialog.setTitle( "Confirmar" );        dialog.setMessage( "La información de cliente es correcta ?" );        dialog.setCancelable( false );        dialog.setPositiveButton( "Confirmar", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        if (mOperationMode == MODE_REGISTER ) {                           popUp.WaitMessageBox("En Progreso","Registrando cliente, espere un momento ....",getActivity());                            DataClientRestService.saveClient(getActivity(),                                                              Utils.appUser.correo,                                                              txtName.getText().toString(),                                                              txtRfc.getText().toString(),                                                              txtPhone.getText().toString(),                                                              txtEmail.getText().toString(),                                                              txtStreet.getText().toString(),                                                              txtZipCode.getText().toString(),                                                              txtNeighborhood.getText().toString(),                                                              txtDelegation.getText().toString(),                                                              txtState.getText().toString(),                                                              txtCity.getText().toString() );                       }                       else if (mOperationMode == MODE_UPDATE ) {                           popUp.WaitMessageBox("En Progreso","Actualizando información cliente, espere un momento ....",getActivity());                           AddressContent.AddressItem addressItem = mclientItem.Address.ITEMS.size()>0? mclientItem.Address.ITEMS.get(POSITION): new AddressContent.AddressItem();                           ViewtoModel();                            DataClientRestService.updateClient(getActivity(),                                                                mclientItem.client.toString(),                                                                addressItem.address.toString(),                                                                mclientItem.name,                                                                mclientItem.rfc,                                                                mclientItem.userMail,                                                                mclientItem.Contacts.getItem( "telefono" ).value ,                                                                mclientItem.Contacts.getItem( "Correo" ).value ,                                                                addressItem.street,                                                                addressItem.zipCode,                                                                addressItem.Neighborhood,                                                                addressItem.Delegation,                                                                addressItem.State,                                                                addressItem.City,                                                                addressItem.Longitude,                                                                addressItem.Latitude,                                                                addressItem.LocEditable.toString(),                                                                Utils.ESTATUS.MODIFY.toString()                            );                       }                    }                }        );        dialog.setNegativeButton( "Cancelar", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        // NO SE HACE NADA                    }                }        );        dialog.show();    }    private boolean validateinfo() {        // reset errors        boolean cancel = false;        txtName.setError( null );        txtRfc.setError( null );        txtPhone.setError( null );        txtEmail.setError( null );        txtStreet.setError( null );        txtZipCode.setError( null );        txtNeighborhood.setError( null );        txtDelegation.setError( null );        txtState.setError( null );        txtCity.setError( null );        View focusView = null;        if (TextUtils.isEmpty(txtName.getText().toString())){            txtName.setError(getString(R.string.require));            focusView=txtName;            cancel = true;        }        if (TextUtils.isEmpty(txtPhone.getText().toString())){            txtPhone.setError(getString(R.string.require));            focusView=txtPhone;            cancel = true;        }        if (TextUtils.isEmpty(txtEmail.getText().toString())){            txtEmail.setError(getString(R.string.require));            focusView=txtEmail;            cancel = true;        } else if (!Utils.isEmailValid(txtEmail.getText().toString())) {            txtEmail.setError(getString(R.string.error_invalid_email));            focusView = txtEmail;            cancel = true;        }        if (TextUtils.isEmpty(txtStreet.getText().toString())){            txtStreet.setError(getString(R.string.require));            focusView=txtStreet;            cancel = true;        }        if (TextUtils.isEmpty(txtZipCode.getText().toString())){            txtZipCode.setError(getString(R.string.require));            focusView=txtZipCode;            cancel = true;        }        if (TextUtils.isEmpty(txtNeighborhood.getText().toString())){            txtNeighborhood.setError(getString(R.string.require));            focusView=txtNeighborhood;            cancel = true;        }        if (TextUtils.isEmpty(txtDelegation.getText().toString())){            txtDelegation.setError(getString(R.string.require));            focusView=txtDelegation;            cancel = true;        }        if (TextUtils.isEmpty(txtState.getText().toString())){            txtState.setError(getString(R.string.require));            focusView=txtState;            cancel = true;        }        if (TextUtils.isEmpty(txtCity.getText().toString())){            txtCity.setError(getString(R.string.require));            focusView=txtCity;            cancel = true;        }        return cancel;    }    public class selectedZipcode implements AdapterView.OnItemSelectedListener{        selectedZipcode(){}        @Override        public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {            String asentamiento =  cmbNeighborhood.getSelectedItem().toString();            DirectoriosPostales.DirectorioPostal dp = zipAdrees.getDirectorioPostal( asentamiento );            txtNeighborhood.setText(dp.getDAsenta() );            txtDelegation.setText(dp.getDMnpio());            txtState.setText(dp.getDEstado());            txtCity.setText(dp.getDCiudad());        }        @Override        public void onNothingSelected(AdapterView<?> adapterView) {        }    }    @Override    public void onDataRestClientResponse(RestService.Action action, RestService.Status result, String message, ClientesResponse.Cliente clientItem) {        popUp.CloseWaitMessageBox();        final String key=action.toString();        String title=(result == RestService.Status.SUCCESSFUL)?"Procedimiento exitoso":"Ocurrio un Error";        String msg = (result == RestService.Status.SUCCESSFUL)? (action == RestService.Action.SAVECLIENT)?                    "Cliente registrado satisfactoriamente":"Cliente actualizado satisfactoriamente":message;        AlertDialog.Builder builder;        builder = new AlertDialog.Builder(getActivity());        builder.setMessage(msg)                .setTitle(title)                .setIcon(R.drawable.alert_circle)                .setPositiveButton("Cerrar", new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int id) {                        if (listener != null) {                            listener.OnNewClientAccomplished(key,mclientItem);                        }                        exitFragment();                    }                });        builder.create();        builder.show();    }    @Override    public void onDataRestClientResponse(RestService.Action action, RestService.Status result, String message, List<ClientesResponse.Cliente> clientItemList) {    }    private void exitFragment () {        // SADB: Close Fragment        getActivity().getSupportFragmentManager().popBackStack();    }    public interface OnNewClientListener {        void OnNewClientAccomplished(String key, ClientContent.ClientItem clientItem);    }}