package com.gatetech.controller.fragments;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.net.Uri;import android.os.Bundle;import android.support.design.widget.TextInputEditText;import android.support.design.widget.TextInputLayout;import android.support.v4.app.Fragment;import android.text.TextUtils;import android.text.method.KeyListener;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.Button;import android.widget.Spinner;import com.gatetech.content.ClientContent;import com.gatetech.content.PhotoContent;import com.gatetech.content.UserContent;import com.gatetech.utils.Utils;import com.gatetech.restserver.Response.UsuariosResponse;import com.gatetech.cadewiclients.R;import com.gatetech.utils.logger;import com.gatetech.utils.popUp;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;import static com.gatetech.utils.Utils.get_manufacturer;/** * A simple {@link Fragment} subclass. * Activities that contain this fragment must implement the * {@link AddNewUserFragment.OnFragmentInteractionListener} interface * to handle interaction events. * Use the {@link AddNewUserFragment#newInstance} factory method to * create an instance of this fragment. */public class AddNewUserFragment extends Fragment  {    // TODO: Rename parameter arguments, choose names that match    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER    public static final int MODE_VISOR = 1;    public static final int MODE_REGISTER = 2;    public static final int MODE_UPDATE = 3;    public static final int JUMP_LOGIN = 1;    public static final int JUMP_USERLIST = 2;    private static final String ARG_OPERATION_MODE = "mOperationMode";    private static final String ARG_JUMPACTION = "mJumpAction";    private static final String ARG_PARAM3 = "UsuariosResponse";    // TODO: Rename and change types of parameters    private int mOperationMode;    private int mJumpAction;    private static UserContent.UserItem usr;    private static TextInputEditText txtName;    private static TextInputEditText txtLastName;    private static TextInputEditText txtMail;    private static TextInputEditText txtPassword;    private static TextInputEditText txtRepeatPassword;    private static TextInputEditText txtProfile;    private static TextInputLayout txtlayoutPassword;    private static TextInputLayout txtlayoutRepeatPassword;    private static Spinner cmbProfile;    private static Button btnAction;    private OnFragmentInteractionListener mListener;    public AddNewUserFragment() {        // Required empty public constructor    }    /**     * Use this factory method to create a new instance of     * this fragment using the provided parameters.     *     * @param operation_mode Parameter 1.     * @param jump_action Parameter 2.     * @return A new instance of fragment AddNewUserFragment.     */    // TODO: Rename and change types and number of parameters    public static AddNewUserFragment newInstance(int operation_mode, int jump_action, UserContent.UserItem usr) {        AddNewUserFragment fragment = new AddNewUserFragment();        Bundle args = new Bundle();        args.putInt(ARG_OPERATION_MODE, operation_mode);        args.putInt(ARG_JUMPACTION, jump_action);        AddNewUserFragment.usr = usr;       // args.p putInt(ARG_PARAM3, usr);        fragment.setArguments(args);        return fragment;    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (getArguments() != null) {            mOperationMode = getArguments().getInt(ARG_OPERATION_MODE);            mJumpAction = getArguments().getInt(ARG_JUMPACTION);        }    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        View view;        view = inflater.inflate(R.layout.fragment_gatetech_add_user, container, false);        this.btnAction =(Button) view.findViewById(R.id.btnSave);        txtName = (TextInputEditText) view.findViewById(R.id.txtName);        txtLastName = (TextInputEditText) view.findViewById(R.id.txtLastName);        txtMail = (TextInputEditText) view.findViewById(R.id.txtMail);        txtPassword = (TextInputEditText) view.findViewById(R.id.txtPassword);        txtRepeatPassword= (TextInputEditText) view.findViewById(R.id.txtRepeatPassword);        txtProfile = (TextInputEditText) view.findViewById(R.id.txtProfile);        txtlayoutPassword = (TextInputLayout) view.findViewById(R.id.txtlayoutPassword);        txtPassword =(TextInputEditText) view.findViewById(R.id.txtPassword);        txtRepeatPassword =(TextInputEditText) view.findViewById(R.id.txtRepeatPassword);        txtlayoutRepeatPassword = (TextInputLayout) view.findViewById(R.id.txtlayoutRepeatPassword);        cmbProfile = (Spinner) view.findViewById(R.id.cmbProfile);        ext_createView();        return view;    }    // TODO: Rename method, update argument and hook method into UI event    public void onButtonPressed(Uri uri) {        if (mListener != null) {            mListener.onFragmentInteraction(uri);        }    }    @Override    public void onAttach(Context context) {        super.onAttach(context);        if (context instanceof OnFragmentInteractionListener) {            mListener = (OnFragmentInteractionListener) context;        } else {            throw new RuntimeException(context.toString()                    + " must implement OnFragmentInteractionListener");        }    }    @Override    public void onDetach() {        super.onDetach();        mListener = null;    }    /**   * This interface must be implemented by activities that contain this     * fragment to allow an interaction in this fragment to be communicated     * to the activity and potentially other fragments contained in that     * activity.     * <p>     * See the Android Training lesson <a href=     * "http://developer.android.com/training/basics/fragments/communicating.html"     * >Communicating with Other Fragments</a> for more information.     */    public interface OnFragmentInteractionListener {        // TODO: Update argument type and name        void onFragmentInteraction(Uri uri);        void onListFragmentInteraction(ClientContent.ClientItem item);        void onListFragmentInteraction(PhotoContent.PhotoItem item);        void onListFragmentInteraction(UserContent.UserItem item);    }    /*********************SADB: Methods Solutions ******************************/    private void generateUser(String name, String last_name, String password, String email, String profile) {        final StringBuilder message  = new StringBuilder();        try {            popUp.WaitMessageBox("En Progreso","Registrando el usuario, espere un momento ...",getActivity());            //Toast.makeText(getContext(),"Guardando ...",Toast.LENGTH_LONG).show();            // SADB: Call to REST API            final Call<UsuariosResponse> callUsers = Utils.mApiService.addNewUser(name,                                                                                  last_name,                                                                                  password,                                                                                  email,                                                                                  profile,                                                                                  Utils.ESTATUS.NEW.toString()            );            callUsers.enqueue(new Callback<UsuariosResponse>() {                @Override                public void onResponse(Call<UsuariosResponse> call, Response<UsuariosResponse> response) {                    popUp.CloseWaitMessageBox();                    // SADB: Response is succesfull ?                    if (response.isSuccessful()) {                        UsuariosResponse usuariosResponse = new UsuariosResponse();                        usuariosResponse = response.body();                        if(usuariosResponse.getEstado().equals(Utils.Status_OK))  {                            popUp.AlertDialog(usuariosResponse.getExcepcion(),"Mensaje","Cerrar",getActivity());                            // exitFragment fragment                        }                        else if (usuariosResponse.getEstado().equals(Utils.Status_FAIL)){                            popUp.AlertDialog(usuariosResponse.getExcepcion(),"Mensaje","Aceptar",getActivity());                        }                    }                    else  {                        message.append("Error HTTP: ").append(response.code()).append(" ").append( response.message());                        popUp.AlertDialog(message.toString(),"Error","Aceptar",getActivity());                    }                    exitFragment();                }                @Override                public void onFailure(Call<UsuariosResponse> call, Throwable t) {                    popUp.CloseWaitMessageBox();                    popUp.AlertDialog("Error: "+ t.getMessage(),"Error !!!","Cerrar",getActivity());                    exitFragment();                }            });        } catch (InterruptedException ex) {            String title="Error generateUser: ";            logger.error(Utils.appUser.correo,title,ex, Utils.LOG_CATEGORY.CLIENT.toString(),get_manufacturer(),getContext());            popUp.CloseWaitMessageBox();            popUp.AlertDialog(ex.toString(),title,"Cerrar",getActivity());            exitFragment();        }    }    private void updateUser (String email,                             String name,                             String last_name,                             String password,                             String profile,                             String wait_message,                             String accomplished_message,                             String status) {        final String iwait_message = wait_message;        final String iaccomplished_message = accomplished_message;        final StringBuilder message  = new StringBuilder();        try {            popUp.WaitMessageBox("En Progreso",iwait_message,getActivity());            // SADB: Call to REST API            final Call<UsuariosResponse> callUsers = Utils.mApiService.updateUser(email,                    name,                    last_name,                    password,                    profile,                    status            );            callUsers.enqueue(new Callback<UsuariosResponse>() {                @Override                public void onResponse(Call<UsuariosResponse> call, Response<UsuariosResponse> response) {                    popUp.CloseWaitMessageBox();                    if (response.isSuccessful()) {                        UsuariosResponse usuariosResponse = new UsuariosResponse();                        usuariosResponse = response.body();                        // SADB: Response is succesfull ?                        if(usuariosResponse.getEstado().equals(Utils.Status_OK))  {                            popUp.AlertDialog(iaccomplished_message,"Mensaje","Cerrar",getActivity());                        }                        else if (usuariosResponse.getEstado().equals(Utils.Status_FAIL)){                            logger.error(Utils.appUser.correo,"Error HTTP: ",usuariosResponse.getExcepcion(),Utils.LOG_CATEGORY.USER.toString(),get_manufacturer(),getActivity());                            popUp.AlertDialog(usuariosResponse.getExcepcion(),"Mensaje","Aceptar",getActivity());                        }                    }                    else  {                        message.append("Error HTTP: ").append(response.code()).append(" ").append( response.message());                        logger.error(Utils.appUser.correo,"Error HTTP: ",message.toString(),Utils.LOG_CATEGORY.USER.toString(),get_manufacturer(),getActivity());                        popUp.AlertDialog(message.toString(),"Error","Aceptar",getActivity());                    }                    exitFragment();                }                @Override                public void onFailure(Call<UsuariosResponse> call, Throwable t) {                    String title = "Failure updateUser.enqueue: ";                    String msg = (t !=  null? t.getMessage() :"Oops something went wrong");                    logger.error(Utils.appUser.correo,title,msg,Utils.LOG_CATEGORY.USER.toString(),get_manufacturer(),getActivity());                    popUp.CloseWaitMessageBox();                    popUp.AlertDialog(msg,title,"Cerrar",getActivity());                    exitFragment();                }            });        } catch (InterruptedException ex) {            String title="Error updateUser: ";            logger.error(Utils.appUser.correo,"Failure updateUser.enqueue: ",ex, Utils.LOG_CATEGORY.USER.toString(),get_manufacturer(),getContext());            popUp.CloseWaitMessageBox();            popUp.AlertDialog(ex.toString(),title,"Cerrar",getActivity());            exitFragment();        }    }    private void exitFragment(){        if (this.mJumpAction == JUMP_USERLIST) {            // SADB: jump to Fragment User list            getActivity().getSupportFragmentManager().beginTransaction().                    replace( R.id.content_main, new UserListFragment() ).addToBackStack(null).commit();        }        else if (this.mJumpAction == JUMP_LOGIN){            // SADB: jump to Login Activity            getActivity().getSupportFragmentManager().beginTransaction().remove(this).commit();        }    }    private void ext_createView(){       txtProfile.setKeyListener((KeyListener) txtProfile.getTag());       this.cmbProfile.setOnItemSelectedListener(new  AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {                String value =  cmbProfile.getSelectedItem().toString();                txtProfile.setText( value );            }            @Override            public void onNothingSelected(AdapterView<?> adapterView) {                txtProfile.setText( "" );            }        });        this.btnAction.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                // SADB: Check info userß                if (!validateinfo()) {                    confirmActionButton();                }            }        }        );        // OPERATION MODE        if (mOperationMode == MODE_VISOR && AddNewUserFragment.usr != null){            getActivity().setTitle(R.string.prompt_UserDetail_Title);            txtName.setText(AddNewUserFragment.usr.nombre);            txtLastName.setText(AddNewUserFragment.usr.apellidos);            txtMail.setText(AddNewUserFragment.usr.correo);            txtProfile.setText(AddNewUserFragment.usr.perfil);            // Freeze Controls            txtName.setKeyListener((KeyListener) txtName.getTag());            txtLastName.setKeyListener((KeyListener) txtLastName.getTag());            txtMail.setKeyListener((KeyListener) txtMail.getTag());            txtProfile.setKeyListener((KeyListener) txtProfile.getTag());            txtlayoutPassword.setVisibility( View.INVISIBLE);            txtlayoutRepeatPassword.setVisibility( View.INVISIBLE);            this.btnAction.setVisibility( View.INVISIBLE );            cmbProfile.setEnabled(false);        }        else if (mOperationMode == MODE_UPDATE && AddNewUserFragment.usr != null){            getActivity().setTitle(R.string.prompt_UserDetail_Title);            txtName.setText(AddNewUserFragment.usr.nombre);            txtLastName.setText(AddNewUserFragment.usr.apellidos);            txtMail.setText(AddNewUserFragment.usr.correo);            txtProfile.setText(AddNewUserFragment.usr.perfil);            txtPassword.setText(AddNewUserFragment.usr.password);            txtRepeatPassword.setText(AddNewUserFragment.usr.password);            this.btnAction.setVisibility( View.VISIBLE );            this.btnAction.setText("Actualizar");            cmbProfile.setEnabled(true);        }        else if(mOperationMode == MODE_REGISTER) {            getActivity().setTitle(R.string.prompt_NewUser_Title);            cmbProfile.setEnabled(!(this.mJumpAction == JUMP_LOGIN));        }    }    private void confirmActionButton() {        AlertDialog.Builder dialog = new AlertDialog.Builder(getActivity());        dialog.setTitle( "Confirmar" );        dialog.setMessage( "La información de usuario es correcta ?" );        dialog.setCancelable( false );        dialog.setPositiveButton( "Confirmar", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        if(mOperationMode == MODE_REGISTER) {                            generateUser(txtName.getText().toString(),                                        txtLastName.getText().toString(),                                        txtPassword.getText().toString(),                                        txtMail.getText().toString(),                                        txtProfile.getText().toString());                        }                        else if (mOperationMode == MODE_UPDATE) {                            updateUser(txtMail.getText().toString(),                                       txtName.getText().toString(),                                       txtLastName.getText().toString(),                                       txtPassword.getText().toString(),txtProfile.getText().toString(),                                    "Actualizando usuario, espere un momento ....",                                    "Usuario actualizado satisfactoriamente",                                       Utils.ESTATUS.MODIFY.toString());                        }                    }                }        );        dialog.setNegativeButton( "Cancelar", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        // NO SE HACE NADA                    }                }        );        dialog.show();    }    private boolean validateinfo() {        // reset errors        boolean cancel = false;        txtName.setError( null );        txtLastName.setError( null );        txtMail.setError( null );        txtPassword.setError( null );        txtRepeatPassword.setError( null );        String password = txtPassword.getText().toString();        String repeat_password  = txtRepeatPassword.getText().toString();        View focusView = null;        if (TextUtils.isEmpty(txtName.getText().toString())){            txtName.setError(getString(R.string.require));            focusView=txtName;            cancel = true;        }        if (TextUtils.isEmpty(txtLastName.getText().toString())){            txtLastName.setError(getString(R.string.require));            focusView=txtLastName;            cancel = true;        }        if (TextUtils.isEmpty(txtMail.getText().toString())){            txtMail.setError(getString(R.string.require));            focusView=txtMail;            cancel = true;        }         else if (!Utils.isEmailValid(txtMail.getText().toString())) {            txtMail.setError(getString(R.string.error_invalid_email));            focusView = txtMail;            cancel = true;        }         // Check for a valid password, if the user entered one.         if (TextUtils.isEmpty(password) && TextUtils.isEmpty(repeat_password)) {            txtPassword.setError(getString(R.string.require));            txtRepeatPassword.setError(getString(R.string.require));            focusView=txtPassword;            cancel = true;        }        else if (!Utils.isPasswordValid(password)){             txtPassword.setError(getString(R.string.error_invalid_password));             focusView = txtPassword;             cancel = true;         }         else if (!password.equals(repeat_password  )){             txtPassword.setError("Claves Diferentes");             txtRepeatPassword.setError("Claves diferentes");             focusView=txtPassword;             cancel = true;         }         return cancel;    }}